
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        bhm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        shm: shift_hr_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    /* macros { */
    /*     bt_0: bt_profile_macro_0 { */
    /*         label = "BT_0"; */
    /*         compatible = "zmk,behavior-macro"; */
    /*         #binding-cells = <0>; */
    /*         bindings */
    /*             = <&out OUT_BLE>, */
    /*               <&bt BT_SEL 0>; */
    /*     }; */
    /* }; */

    /* macros { */
    /*     bt_1: bt_profile_macro_1 { */
    /*         label = "BT_1"; */
    /*         compatible = "zmk,behavior-macro"; */
    /*         #binding-cells = <0>; */
    /*         bindings */
    /*             = <&out OUT_BLE>, */
    /*               <&bt BT_SEL 1>; */
    /*     }; */
    /* }; */

    /* macros { */
    /*     bt_2: bt_profile_macro_2 { */
    /*         label = "BT_2"; */
    /*         compatible = "zmk,behavior-macro"; */
    /*         #binding-cells = <0>; */
    /*         bindings */
    /*             = <&out OUT_BLE>, */
    /*               <&bt BT_SEL 2>; */
    /*     }; */
    /* }; */

    /* macros { */
    /*     bt_3: bt_profile_macro_3 { */
    /*         label = "BT_3"; */
    /*         compatible = "zmk,behavior-macro"; */
    /*         #binding-cells = <0>; */
    /*         bindings */
    /*             = <&out OUT_BLE>, */
    /*               <&bt BT_SEL 3>; */
    /*     }; */
    /* }; */

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
  &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
    &kp PLUS     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp PIPE
    &kp ESC     &bhm LGUI A &bhm LCTRL S &bhm LALT D    &kp F &kp G                                                   &kp H &kp J  &bhm LALT K  &bhm RCTRL L  &bhm RGUI SEMI &kp EQUAL
  &kp MINUS     &kp Z    &kp X     &kp C      &kp V   &kp B  &kp LSHIFT  &kp LBRC    &kp LBKT  &kp RBKT  &kp RBRC  &kp RSHIFT   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp UNDER
 &magic 2 0  &kp EXCL  &kp COLON  &kp LPAR  &kp RPAR           &lt 1 SPACE &kp BSPC   &kp TAB   &kp GRAVE &kp SQT &lt 2 ENTER          &kp DQT &kp LT &kp GT &kp QMARK &kp TILDE
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &kp EXCL        &kp AT          &kp HASH        &kp DLLR &kp PRCNT                                                  &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &trans
       &trans  &kp N1   &kp N2 &kp N3   &kp N4   &kp N5                                                                                    &kp N6 &kp N7 &kp N8  &kp N9 &kp N0 &trans
       &trans  &kp ESC   &kp PLUS &kp MINUS   &kp EQUAL   &kp UNDER  &trans  &trans   &trans  &trans  &trans  &trans              &kp LBKT &kp RBKT  &kp BSLH     &kp LBRC &kp RBRC &kp TILDE
   &magic 2 0      &kp LG(LS(LA(LC(N))))         &kp LG(LS(LA(LC(C))))         &kp LG(LS(LA(LC(E))))          &kp LG(LS(LA(LC(T))))             &trans  &trans  &trans  &trans  &trans  &trans                          &kp LG(LS(LA(LC(S))))     &kp LG(LS(LA(LC(W))))    &kp LG(LS(LA(LC(M))))     &kp LG(LS(LA(LC(D))))       &kp LG(LS(LA(LC(A))))
            >;
        };

        layer_Magic {
            bindings = <
              &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                               &none   &none   &none   &bt BT_CLR  &bt BT_CLR_ALL
      &bootloader  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
       &kp F12 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                                                         &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
 &trans &kp C_PREV  &kp C_NEXT   &kp C_VOL_DN &kp C_VOL_UP &kp C_PP                                                         &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp F11 &trans
      &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans &trans         &trans   &trans   &trans   &trans   &trans &trans &trans &trans  &kp F12  &trans
       &trans            &trans            &trans            &trans            &trans                    &trans   &trans  &trans &trans   &trans   &trans           &trans   &trans   &trans   &trans           &trans
            >;
        };
    };
};
